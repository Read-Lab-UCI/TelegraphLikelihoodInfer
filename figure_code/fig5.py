import shelve
from matplotlib.colors import TwoSlopeNorm,LogNorm
import matplotlib.pyplot as plt
import matplotlib.ticker as tkr
from matplotlib.colors import CenteredNorm
from matplotlib.colors import LogNorm
from matplotlib.gridspec import GridSpec
import numpy as np
import scipy,torch

g=shelve.open('../library_300_with_sense_2','r')
psim=g['downsample_1.0'].todense()
b = shelve.open('../library_with_sense_log', 'r')
singular_value = np.zeros(60 * 60 * 60)
start = 0
for i in range(len(b.keys())):
    tmp = torch.svd(torch.swapaxes(torch.tensor(b['batch' + str(i)].S), 0, 1)[:, :4, :], compute_uv=False)
    tmp = tmp.S.min(axis=1).values
    singular_value[start:start + tmp.shape[0]] = tmp
    start += tmp.shape[0]
singular_value=singular_value.reshape(60,60,60)
moments = np.zeros((psim.shape[0], 3))
m1=np.sum(np.arange(psim.shape[1])[None, :] * psim, axis=1)
moments[:,0]=m1
moments[:, 1] = np.sum(((np.arange(psim.shape[1])[None,:] - m1[:,None]) ** 2) * psim, axis=1)
moments[:, 2] = np.sum(((np.arange(psim.shape[1])[None,:] -m1[:,None]) ** 3) * psim,axis=1)
m3=moments[:,2].reshape(60,60,60)
S_single_value=np.log10(np.min(g['S_single_value'],axis=1).reshape(60,60,60))
#CI=scipy.io.loadmat('self_infer_results_all.mat')['1.0']['CI'][0][0][:,-1,:,-1]
#CI=(CI-np.min(CI,axis=0)[np.newaxis,:])/(np.max(CI,axis=0)-np.min(CI,axis=0))[np.newaxis,:]
#CI=CI.max(axis=1).reshape(60,60,60)
ksyn=np.linspace(-0.3,2.3,60)
koff=np.linspace(-3,3,60)
kon=np.linspace(-3,3,60)
X,Y=np.meshgrid(kon,koff)

fig=plt.figure(figsize=(6,6),dpi=400)
gs0 = GridSpec(2,2)
levels=np.linspace(0,0.06,61)
ax1 = fig.add_subplot(gs0[0,0],projection='3d')
ax1.contourf(X,Y,singular_value[15,:,:],zdir='z',offset=ksyn[15],levels=60,cmap='viridis_r',vmin=singular_value.min(),vmax=singular_value.max())
ax1.contourf(X,Y,singular_value[30,:,:],zdir='z',offset=ksyn[30],levels=60,cmap='viridis_r',vmin=singular_value.min(),vmax=singular_value.max())
surface=ax1.contourf(X,Y,singular_value[45,:,:],zdir='z',offset=ksyn[45],levels=60,cmap='viridis_r',vmin=singular_value.min(),vmax=singular_value.max())
ax1.set_zlim(ksyn[15],ksyn[45])
ax1.set_zticks([0.3,1.0,1.5])
ax1.view_init(azim=250)
ax1.text2D(-0.1, 1.15, 'A', transform=ax1.transAxes, size=12, weight='bold')
ax1.set_title('min singular(S)',fontsize=10)
cbar=plt.colorbar(surface,ax=ax1,extend='both')
log_ticks=[10**-19,10**-2,2*10**-2,3*10**-2,4*10**-2]
cbar.set_ticks(log_ticks)
cbar.set_ticklabels([f'$1e-17$',f'$1$',f'$2$',f'$3$',f'$4$'])
cbar.ax.set_title('1e-2')




#levels=np.linspace(CI.min(),CI.max(),60)
#ax1 = fig.add_subplot(gs0[0,1],projection='3d')
#ax1.contourf(X,Y,CI[5,:,:],zdir='z',alpha=0.7,offset=ksyn[5],levels=levels)
#ax1.contourf(X,Y,CI[17,:,:],zdir='z',alpha=0.7,offset=ksyn[17],levels=levels)
#ax1.contourf(X,Y,CI[29,:,:],zdir='z',alpha=0.7,offset=ksyn[29],levels=levels)
data=scipy.io.loadmat('self_infer_CI_lib_downsample_1.0.mat')
metric=np.zeros((data['CI'].shape[0],data['CI'].shape[1],data['CI'].shape[2]+1))
metric[:,:,0]=np.log10(data['CI'][:,:,0,1]/data['CI'][:,:,0,0])
metric[:,:,1]=np.log10(data['CI'][:,:,1,1]/data['CI'][:,:,1,0])
metric[:,:,2]=np.log10(data['CI'][:,:,2,1]/data['CI'][:,:,2,0])
metric=metric/(np.array([0.7,2,2,1])[np.newaxis,np.newaxis,:])
metric[:,:,3]=metric[:,:,:3].max(axis=2)
metric=metric[:,1,-1].reshape(60,60,60)
levels=np.linspace(0,metric.max(),61)
ax1 = fig.add_subplot(gs0[1,0],projection='3d')
ax1.contourf(X,Y,metric[15,:,:],zdir='z', offset=ksyn[15],cmap='viridis',levels=levels)
ax1.contourf(X,Y,metric[30,:,:],zdir='z', offset=ksyn[30],cmap='viridis',levels=levels)
surface=ax1.contourf(X,Y,metric[45,:,:],zdir='z',offset=ksyn[45],cmap='viridis',levels=levels)
ax1.set_zlim(ksyn[15],ksyn[45])
ax1.set_zticks([0.3,1.0,1.5])
ax1.view_init(azim=250)
ax1.text2D(-0.1, 1.15, 'C', transform=ax1.transAxes, size=12, weight='bold')
ax1.set_title('APM',fontsize=10)
cbar=fig.colorbar(surface,ax=ax1,extend='both',ticks=np.linspace(0,np.round(metric.max()),6))

temp=np.clip((moments[:,-1]/moments[:,0]).reshape(60,60,60),a_min=-40,a_max=40)
levels=np.linspace(temp[[15,30,45]].min(),60,60)
divnorm=TwoSlopeNorm(vmin=-40, vcenter=1, vmax=40)
ax1 = fig.add_subplot(gs0[0,1],projection='3d')
ax1.contourf(X,Y,temp[15,:,:],zdir='z',offset=ksyn[15],cmap='RdBu_r',norm=divnorm,levels=levels)
ax1.contourf(X,Y,temp[30,:,:],zdir='z',offset=ksyn[30],cmap='RdBu_r',norm=divnorm,levels=levels)
surface=ax1.contourf(X,Y,temp[45,:,:],zdir='z',offset=ksyn[45],cmap='RdBu_r',norm=divnorm,levels=levels)
ax1.set_zlim(ksyn[15],ksyn[45])
ax1.set_zticks([0.3,1.0,1.5])
ax1.view_init(azim=250)
ticks=np.hstack((np.linspace(-40,0,5)[:-1],np.linspace(0,40,5)[1:],[1]))
ticks=list(set(ticks))
ticks.sort()
cbar=fig.colorbar(surface,ax=ax1,ticks=ticks,extend='both')
#cbar.formatter.set_powerlimits((0,0))
ax1.set_title(r'M3/$\mu$',fontsize=10)
ax1.set_xlabel('kon in log10')
ax1.set_ylabel('koff in log10')
ax1.set_zlabel('ksyn in log10')
ax1.text2D(-0.1, 1.15, 'B', transform=ax1.transAxes, size=12, weight='bold')

fano=np.clip((moments[:,1]/moments[:,0]).reshape(60,60,60),a_min=0.997, a_max=10)
divnorm=TwoSlopeNorm(vmin=0.997, vcenter=1, vmax=10)
levels=np.hstack((np.linspace(0.997,1,31),np.linspace(1,10,37)[1:]))
ax1=fig.add_subplot(gs0[1,1],projection='3d')
ax1.contourf(X,Y,fano[15,:,:],zdir='z',offset=ksyn[15],cmap='RdBu_r',norm=divnorm,levels=levels)
ax1.contourf(X,Y,fano[30,:,:],zdir='z',offset=ksyn[30],cmap='RdBu_r',norm=divnorm,levels=levels)
surface=ax1.contourf(X,Y,fano[45,:,:],zdir='z',offset=ksyn[45],cmap='RdBu_r',norm=divnorm,levels=levels)
ax1.set_zlim(ksyn[15],ksyn[45])
ax1.set_zticks([0.3,1.0,1.5])
ax1.view_init(azim=250)
ax1.set_title('Fano factor',fontsize=10)
ticks=np.hstack((np.linspace(0.997,1,2),np.linspace(0,10,6)[1:]))
cbar=fig.colorbar(surface,ax=ax1,extend='both',ticks=ticks,format=tkr.FormatStrFormatter('%.3g'))
ax1.text2D(-0.1, 1.15, 'D', transform=ax1.transAxes, size=12, weight='bold')
fig.tight_layout()
fig.savefig('fig5.eps',format='eps')
fig.savefig('fig5.svg',format='svg')
fig.savefig('fig5')
g=shelve.open('../larsson_data/SS3_cast_UMIs_concat_histogram','r')
fig2,axe2=plt.subplots(2,5,figsize=(15,6))
surface=axe2[0,0].imshow(metric[10],origin='lower')
axe2[0,0].set_title('APM')
plt.colorbar(surface,ax=axe2[0,0])
surface=axe2[1,0].imshow(metric[59],origin='lower')
plt.colorbar(surface,ax=axe2[1,0])
divnorm=TwoSlopeNorm(vmin=0.997, vcenter=1, vmax=11)
levels=np.hstack((np.linspace(0.997,1,31),np.linspace(1,10,37)[1:]))
surface=axe2[0,1].imshow(fano[10],origin='lower',norm=divnorm,cmap='RdBu_r')
ticks=np.hstack((np.linspace(0.997,1,2),np.linspace(3,11,5)))
plt.colorbar(surface,ax=axe2[0,1],ticks=ticks, format=tkr.FormatStrFormatter('%.3g'))
axe2[0,1].set_title('Fano')
axe2[0,2].set_title('M3/M2')
axe2[0,3].set_title('M3/mean')
axe2[0,4].set_title('M3')
surface=axe2[1,1].imshow(fano[59],origin='lower',norm=divnorm,cmap='RdBu_r')
plt.colorbar(surface,ax=axe2[1,1],ticks=ticks, format=tkr.FormatStrFormatter('%.3g'))
temp=np.clip((moments[:,-1]/moments[:,1]).reshape(60,60,60),a_min=-10,a_max=10)
divnorm=TwoSlopeNorm(vmin=-10, vcenter=1, vmax=11)
surface=axe2[0,2].imshow(temp[10],origin='lower',norm=divnorm,cmap='RdBu_r')
plt.colorbar(surface,ax=axe2[0,2])
divnorm=TwoSlopeNorm(vmin=-10, vcenter=1, vmax=10)
surface=axe2[1,2].imshow(temp[59],origin='lower',norm=divnorm,cmap='RdBu_r')
plt.colorbar(surface,ax=axe2[1,2])
temp=np.clip((moments[:,-1]/moments[:,0]).reshape(60,60,60),a_min=-40,a_max=40)
divnorm=TwoSlopeNorm(vmin=-40, vcenter=1, vmax=40)
surface=axe2[0,3].imshow(temp[10],origin='lower',norm=divnorm,cmap='RdBu_r')
plt.colorbar(surface,ax=axe2[0,3])
divnorm=TwoSlopeNorm(vmin=-40, vcenter=1, vmax=40)
surface=axe2[1,3].imshow(temp[59],origin='lower',norm=divnorm,cmap='RdBu_r')
plt.colorbar(surface,ax=axe2[1,3])
temp=(moments[:,-1]).reshape(60,60,60)
divnorm=TwoSlopeNorm(vmin=-40, vcenter=0, vmax=40)
surface=axe2[0,4].imshow(temp[10],origin='lower',norm=divnorm,cmap='RdBu_r')
plt.colorbar(surface,ax=axe2[0,4])
divnorm=TwoSlopeNorm(vmin=-40, vcenter=0, vmax=40)
surface=axe2[1,4].imshow(temp[59],origin='lower',norm=divnorm,cmap='RdBu_r')
plt.colorbar(surface,ax=axe2[1,4])

fig2.tight_layout()
fig2.show()

print('done')




