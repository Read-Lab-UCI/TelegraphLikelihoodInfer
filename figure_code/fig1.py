import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from function2 import compute_cme_one_gene_two_state
from curlybrace import curlyBrace
import shelve
x,y=np.meshgrid(np.arange(6),np.arange(6))
fig=plt.figure(figsize=(14,7),dpi=400)
ax=fig.add_subplot(2,3,1)
fig.text(0.01, 0.94, 'A', fontsize=25, weight='bold')
psim=compute_cme_one_gene_two_state(np.array([0,15,0.01,0.03,1])).todense().ravel()[:30]
lib=shelve.open('../library_300','r')['downsample_1.0']
ax.plot(psim)
ax.set_xticks([])
ax.set_yticks([])
ax.set_xlabel('mRNA copy number',fontsize=20)
ax.set_ylabel('probability',fontsize=20)
im=plt.imread('two_state_cartoon.png')
oi=OffsetImage(im,zoom=0.18)
box=AnnotationBbox(oi,(15,psim[0]/1.2),frameon=False)
ax.add_artist(box)
im=plt.imread('cme.png')
oi=OffsetImage(im,zoom=0.16)
box=AnnotationBbox(oi,(15,psim[0]/2),frameon=False)
ax.add_artist(box)

ax.set_title('Distribution from CME',fontsize=20)

ax=fig.add_subplot(2,3,2,projection='3d')
ax.voxels(np.ones((10,10,10)),facecolors='white',edgecolors='k')
ax.grid(visible=True)
ax.set_xticks([])
ax.set_yticks([])
ax.set_zticks([])
ax.dist=8
ax.xaxis.set_pane_color((1.0, 1.0, 1.0, 0.0))
ax.yaxis.set_pane_color((1.0, 1.0, 1.0, 0.0))
ax.zaxis.set_pane_color((1.0, 1.0, 1.0, 0.0))
ax.w_xaxis.line.set_color((1.0, 1.0, 1.0, 0.0))
ax.w_yaxis.line.set_color((1.0, 1.0, 1.0, 0.0))
ax.w_zaxis.line.set_color((1.0, 1.0, 1.0, 0.0))
ax.text2D(x=0.65,y=0.95,s=r"$\theta_2$",transform=ax.transAxes,fontsize=20)
ax.text2D(x=-0.15,y=0.4,s=r"$\theta_1$",transform=ax.transAxes,fontsize=20)
ax.text2D(x=0.85,y=0.1,s=r"$\theta_3$",transform=ax.transAxes,fontsize=20)
ax.text2D(x=-0.2,y=-0.1,s='sampled parameter space',transform=ax.transAxes,fontsize=20)

ax=fig.add_subplot(2,3,3)
fig.text(0.665, 0.94, 'B', fontsize=25, weight='bold')
ax.set_title('target distribution',fontsize=20)
psim=np.abs(compute_cme_one_gene_two_state(np.array([0,15,0.01,0.005,1])).todense().ravel()[:30])
psim=psim/psim.sum()
sample=np.random.choice(np.arange(psim.shape[0]),200,p=psim)
noise=np.random.randint(0,psim.shape[0]-1,size=50)
sample=np.hstack((sample,noise))
hist=np.histogram(sample,bins=np.arange(psim.shape[0]))
ax.plot(hist[0]/hist[0].sum())
ax.set_xticks([])
ax.set_yticks([])
ax.set_xlabel('mRNA copy number',fontsize=20)
ax.set_ylabel('probability',fontsize=20)
im=plt.imread('LL_function.png')
oi=OffsetImage(im,zoom=0.4)
box=AnnotationBbox(oi,(15,psim[0]/1.8),frameon=False)
ax.add_artist(box)


ax1 = fig.add_subplot(2, 3, 6,projection='3d')
levels=np.arange(6)
ax1.contourf(x,y,np.ones(x.shape)+0,zdir='z',levels=levels,alpha=1)
ax1.contourf(x,y,np.ones(x.shape)+1,zdir='z',levels=levels,alpha=1)
ax1.contourf(x,y,np.ones(x.shape)+2,zdir='z',levels=levels,alpha=1)
ax1.contourf(x,y,np.ones(x.shape)+3,zdir='z',levels=levels,alpha=1)
ax1.contourf(x,y,np.ones(x.shape)+4,zdir='z',levels=levels,alpha=1)
ax1.contourf(x,y,np.ones(x.shape)+5,zdir='z',levels=levels,alpha=1)
ax1.grid(visible=True)
ax1.set_xticks([])
ax1.set_yticks([])
ax1.set_zticks([])
ax1.dist=8
fig.text(0.665, 0.53, 'C', fontsize=25, weight='bold')
ax1.text2D(x=0.65,y=0.95,s=r"$\theta_2$",transform=ax1.transAxes,fontsize=20)
ax1.text2D(x=-0.15,y=0.4,s=r"$\theta_1$",transform=ax1.transAxes,fontsize=20)
ax1.text2D(x=0.85,y=0.1,s=r"$\theta_3$",transform=ax1.transAxes,fontsize=20)
ax1.xaxis.set_pane_color((1.0, 1.0, 1.0, 0.0))
ax1.yaxis.set_pane_color((1.0, 1.0, 1.0, 0.0))
ax1.zaxis.set_pane_color((1.0, 1.0, 1.0, 0.0))
ax1.w_xaxis.line.set_color((1.0, 1.0, 1.0, 0.0))
ax1.w_yaxis.line.set_color((1.0, 1.0, 1.0, 0.0))
ax1.w_zaxis.line.set_color((1.0, 1.0, 1.0, 0.0))
ax1.text2D(x=-0.2,y=-0.5,s='likelihood against library',transform=ax1.transAxes,fontsize=20)


#data=np.array([[1,1,5,5,1,3,3.2],[1,5,5,1,1,3,2.2]])
data=np.array([[1,2,3,4,5,5,4,3,2,1,3,3.2],[2,4,5,4,3,2,1,1,1,2,3,2.2]])
contour_x=np.linspace(2.2,3.8,20)
#contour_x1=np.linspace(1.5,4.2,20)
contour_x=np.hstack((contour_x,contour_x[::-1]))
#contour_x1=np.hstack((contour_x1,contour_x1[::-1]))
contour_y=np.array([2.10,2.15,2.25,2.5,2.8,3.6,3.67,3.72,3.76,3.88,3.88,3.87,3.84,3.80,3.75,3.62,3.50,3.44,3.20,2.9,2.6,2.4,2.09,2.0,1.95,1.9,1.85,1.80,1.75,1.72,1.70,1.72,1.75,1.77,1.80,1.83,1.86,1.87,1.89,2.10])
#contour_y1=np.array([2,2.15,2.35,2.7,2.8,3.4,3.6,3.82,4.0,4.2,4.5,4.45,4.40,4.2,4.1,4.0,3.8,3.5,3.35,3.0,2.8,2.2,2.0,1.74,1.65,1.59,1.53,1.48,1.44,1.40,1.36,1.34,1.40,1.42,1.40,1.43,1.54,1.65,1.7,2])
ax=fig.add_subplot(2,3,5)
ax.grid(visible=True,linewidth=2)
ax.plot(contour_x,contour_y,c='lightpink')
#ax.plot(contour_x1,contour_y1,c='orange')
ax.fill_between([0,0,6,6],[0,6,6,0],0,color='beige',label=r">$\Delta_{\alpha}+\beta_1$")
ax.plot(data[0,:-2],data[1,:-2],marker='o')
ax.fill_between(data[0,:-2],data[1,:-2],2,color='lightblue',label=r"<$\Delta_{\alpha}+\beta_1$")
ax.fill_between(contour_x,contour_y,2.0,color='lightpink',label=r"<$\Delta_{\alpha}$")
ax.plot([1,1,5,5,1],[1,5,5,1,1],color='orange',label='search bound')
ax.scatter(data[0,-2],data[1,-2],marker='x',c='darkred',zorder=10,s=50)
ax.scatter(data[0,-1],data[1,-1],marker='*',c='green',s=50)
ax.annotate('grid min',[data[0,-2],data[1,-2]+0.4],fontsize=18)
ax.annotate('slice min',[data[0,-1],data[1,-1]-0.6],fontsize=18)
style = "Simple, tail_width=0.5, head_width=4, head_length=8"
kw = dict(arrowstyle=style, color="k")
a = patches.FancyArrowPatch((data[0,-2], data[1,-2]), (data[0,-1], data[1,-1]),connectionstyle="arc3,rad=.5", **kw,zorder=5)
ax.add_patch(a)
ax.set_ylim(0,6)
ax.set_xlim(0,6)
ax.tick_params(axis='x', colors=(0,0,0,0))
ax.tick_params(axis='y', colors=(0,0,0,0))
ax.text(0.45,1.05,s=r"$\theta_2$",transform=ax.transAxes,fontsize=20)
ax.set_ylabel(r"$\theta_3$",fontsize=20)
ax.text(x=0.05,y=-0.5,s='slice of likelihood surface',transform=ax.transAxes,fontsize=20)
fig.text(0.33, 0.53, 'D', fontsize=25, weight='bold')
ax.legend(loc='upper center', bbox_to_anchor=(0.5, 0.05),ncol=2,fancybox=False,fontsize=15,frameon=False)
con = patches.ConnectionPatch(xyA=(0.15, 0.25), coordsA=ax1.transAxes,xyB=(1.05,0.25), coordsB=ax.transAxes,arrowstyle='-|>,head_length=0.5,head_width=0.2',linestyle=(0, (5, 10)),connectionstyle="arc3,rad=-.5", color='black', mutation_scale=15, lw=2)
con1 = patches.ConnectionPatch(xyA=(1.051, 0.25), coordsA=ax.transAxes,xyB=(1.050,0.25), coordsB=ax.transAxes,arrowstyle='-|>,head_length=0.5,head_width=0.2',connectionstyle="arc3,rad=-.5", color='black', mutation_scale=15, lw=2)

ax=fig.add_subplot(2,3,4)
ax.plot((np.arange(0,30,1)-15)**2)
x_ticks_labels = ['']*30
x_ticks_labels[6]='lb'
x_ticks_labels[15]='MLE'
x_ticks_labels[24]='ub'
ax.axvline(6,linestyle=(0, (5, 5)),color='black')
ax.axvline(24,linestyle=(0, (5, 5)),color='black')
ax.axhline(81,color='red')
ax.axhline(0,linestyle=(0, (5, 5)),color='black')
ax.set_yticks([])
ax.tick_params(bottom = False)
ax.set_xticks(np.arange(0,30,1))
ax.set_xticklabels(x_ticks_labels,fontsize=20)
ax.set_xlabel(r"$\theta_1$",fontsize=20)
ax.set_ylabel('PL',fontsize=20)
ax.text(x=0.2,y=-0.5,s='profile likelihood',transform=ax.transAxes,fontsize=20)
myArrow = patches.FancyArrowPatch(posA=(26, 0), posB=(26, 81), arrowstyle='<|-|>', color='0.5',
                          mutation_scale=20, shrinkA=0, shrinkB=0)
ax.add_artist(myArrow)
curlyBrace.curlyBrace(fig, ax, [6,100], [24,100], 0.1, bool_auto=True, str_text='CI',fontdict={'size':25}, color='black', lw=2, int_line_num=1)
fig.text(0.01, 0.53, 'E', fontsize=25, weight='bold')
ax.text(0.87, 0.15,  r"$\Delta_{\alpha}$", transform=ax.transAxes, size=25, weight='bold')
fig.text(0.67,0.11,'optimized within\n      one slice',fontsize=20)
ax.scatter([15],[0],marker='*',color='green',s=50,zorder=10)

fig.add_artist(con)
fig.add_artist(con1)
fig.tight_layout()
fig.savefig('optimization_illustration.svg',format='svg')
fig.savefig('optimization_illustration.eps',format='eps')
fig.savefig('optimization_illustration')
